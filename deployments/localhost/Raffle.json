{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOpen",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "passedTime",
          "type": "uint256"
        }
      ],
      "name": "UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x222e54f073238b3d32970d7691311b8a016f3be05456b2a8e73db41c234d957f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1275255",
    "logsBloom": "0x
    "blockHash": "0xcdd6522eeeede66ccc157b5871c78db0f417f8410683c38b7705f1c65981cfe1",
    "transactionHash": "0x222e54f073238b3d32970d7691311b8a016f3be05456b2a8e73db41c234d957f",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1275255",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "10000000000000000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "6194dcf836f0ccc9c6cae60494d6473f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOpen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"passedTime\",\"type\":\"uint256\"}],\"name\":\"UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Shadab Iqbal\",\"details\":\"This contract utilizes Chainlink VRF v2 and Chainlink Keepers\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. If checkUpKeep() returns true, the \\\"performUpKeep\\\" function will be called. The following should be true for this to return true: 1. The lottery is open. 2. The time interval has passed between raffle runs. 3. There is atleast 1 participant 4. The contract has ETH. 5. Implicity, your subscription is funded with LINK.\"}},\"title\":\"An unbiased lottery contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is to create an untamperable decentralized lottery system\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"/* Participants will have to pay a fee to enter the lottery.\\n    A random winner will be selected after a certain time inverval.\\n    The winner will get all the money, and all the data will be reset. \\n    Again, a new winner will be selected after the same time interval.\\n*/\\n\\n// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.7;\\n\\n// these 2 imports are for Chainlink VRF\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n// this import is for Chainlink Automation/Keepers\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\n// error functions are more gas effecient than error messages of require\\nerror NotEnoughETHEntered();\\nerror TransferFailed();\\nerror NotOpen();\\nerror UpkeepNotNeeded(\\n    uint256 currentBalance, // these params are needed so that\\n    uint256 numPlayers, // one can identify the cause of why\\n    uint256 raffleState, // upkeep is not needed\\n    uint256 passedTime\\n);\\n\\n/** @title An unbiased lottery contract\\n * @author Shadab Iqbal\\n * @notice This contract is to create an untamperable decentralized lottery system\\n * @dev This contract utilizes Chainlink VRF v2 and Chainlink Keepers\\n */\\n\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    /* Type declarations (enum, struct, etc) */\\n\\n    // enum is a datatype like arary, but instead of indices, the value are explicit\\n    // and can be directly accessed\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    } // uint256 0 = OPEN, 1 = CALCULATING\\n\\n    // this is the minimum amount someone has to pay if he wants to be a part of the lottery\\n    uint256 private immutable i_entranceFee; // \\\"i\\\" refers to immutable variable\\n    // we could also make address payable[] private s_players; but i like to typecast at the time of calling\\n    address[] private s_players; // \\\"s\\\" refers to storage variables\\n    // storing the address of the most recent winner\\n    address private s_recentWinner;\\n\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    // keyHash controls what is the maximum allowed gas price\\n    bytes32 private immutable i_keyHash;\\n    // this id is needed because we are able to fetch the data due to having a subscription in chainlink\\n    uint64 private immutable i_subscriptionId;\\n    // the maximum amount of gas our fulfillRandomWords function can use\\n    uint32 private immutable i_callbackGasLimit;\\n    // how many blocks to wait before confirmation\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    // how many random words we want to get at a time\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    RaffleState private s_raffleState;\\n    // the time interval after which the random winnner will be picked\\n    uint256 private immutable i_interval;\\n    // the last timestamp when a winner was picked\\n    uint256 private s_lastTimeStamp;\\n\\n    // NOTE ABOUT EVENTS:\\n    // read the basics of events from learnt.txt\\n    // parameters of events can be of 2 types => indexed, non-indexed\\n    // indexed parameters are easier to find in the chain and they also require more gas to pump into blockchain\\n    // non-indexed params are harder to find because they are encoded with the abi,\\n    // but they require comparatively less gas. Without knowing the abi, it is not possible to decode these non-indexed params\\n    event RaffleEnter(address indexed player); // good naming convention is to reverse of the words of the function name\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    // saving the list of all winners\\n    event WinnerPicked(address indexed winner);\\n\\n    // here are 2 different constructors merged together,\\n    // this is like calling super() with a parameter\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint256 _entranceFee,\\n        bytes32 _keyHash,\\n        uint64 _subscriptionId,\\n        uint32 _callbackGasLimit,\\n        uint256 _interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2); // type casting with VRFCoordinator\\n        i_entranceFee = _entranceFee;\\n        // these parameters are necessary for Chainlink VRF to work\\n        i_keyHash = _keyHash;\\n        i_subscriptionId = _subscriptionId;\\n        i_callbackGasLimit = _callbackGasLimit;\\n        // setting the time interval\\n        i_interval = _interval;\\n        // setting the initial state of the lottery\\n        s_raffleState = RaffleState.OPEN; // alternative: RaffleState(0)\\n        // marking the current timestamp of the blockchain\\n        s_lastTimeStamp = block.timestamp;\\n    }\\n\\n    function enterRaffle() public payable {\\n        // reverting the transaction if not enough entrance fee is provided to the contract\\n        if (msg.value < i_entranceFee) revert NotEnoughETHEntered();\\n        // reverting if the raffle is currently in \\\"calculating\\\" state\\n        if (s_raffleState == RaffleState.CALCULATING) revert NotOpen();\\n        // storing the informatio. of the players participating in the raffle\\n        s_players.push(msg.sender);\\n        // emitting the event\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    /* -------------------------------------------------------------------------------- */\\n\\n    // NOTE: to keep generating a random number request after e certain time interval,\\n    // we need to use Chainlink keepers. For that, we must have 2 functions => checkUpKeep, performUpKeep\\n    // the \\\"performUpKeep()\\\" function will have the same task as the \\\"requestRandomWords()\\\" function\\n    // but as we have to override performUpKeep, we need to keep the name performUpKeep instead of requestRandomWords\\n\\n    // NOTE: for our contract to have Verifiable Random Functions (VRF) using chainlink,\\n    // we need to have 2 functions => requestRandomWords, fulfillRandomWords\\n\\n    /**\\n     * @dev This is the function that the Chainlink Keeper nodes call\\n     * they look for `upkeepNeeded` to return True. If checkUpKeep() returns true,\\n     * the \\\"performUpKeep\\\" function will be called.\\n     * The following should be true for this to return true:\\n     * 1. The lottery is open.\\n     * 2. The time interval has passed between raffle runs.\\n     * 3. There is atleast 1 participant\\n     * 4. The contract has ETH.\\n     * 5. Implicity, your subscription is funded with LINK.\\n     */\\n\\n    // the following 2 function structures are copied from the chainlink docs\\n    // this will also be called from inside as well, for security purpose. Thats why public.\\n    // and as the function is no longer external, we have to change bytes calldata to bytes memory\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\n    {\\n        upkeepNeeded = false;\\n        if (\\n            (s_raffleState == RaffleState.OPEN) &&\\n            ((block.timestamp - s_lastTimeStamp) > i_interval) &&\\n            (s_players.length > 0) &&\\n            (address(this).balance > 0)\\n        ) upkeepNeeded = true;\\n        return (upkeepNeeded, \\\"0x0\\\");\\n    }\\n\\n    // this function can take any types of parameters (even functions), because of the \\\"bytes calldata\\\" type\\n    // this function will be called by chainlink keeper node, if checkUpKeep() returns true\\n    function performUpkeep(bytes calldata /* performData */) external override {\\n        // as this function can be called externally, a manual check should also be done\\n        // to see if actually checkUpKeep() is returning true or not\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState),\\n                (block.timestamp - s_lastTimeStamp)\\n            );\\n        }\\n        // closing the raffle first\\n        s_raffleState = RaffleState.CALCULATING;\\n\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_keyHash,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    // for every different request for a random number, there will be separate _requestId\\n    // and all the random numbers come through the array _randomWords\\n    // in this function, we are picking the winner from the participants list and\\n    // sending all the money to the winner\\n    function fulfillRandomWords(\\n        uint256 /* _requestId, */, // commenting out because we dont need this variable\\n        uint256[] memory _randomWords\\n    ) internal override {\\n        // modulo so that the random number is always between 0 - array length\\n        uint256 indexOfWinner = _randomWords[0] % s_players.length;\\n        // saving the address of the winner\\n        s_recentWinner = s_players[indexOfWinner];\\n        (bool callSuccess, ) = payable(s_recentWinner).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        if (!callSuccess) revert TransferFailed();\\n\\n        // resetting the participants list\\n        s_players = new address[](0);\\n        // setting the current time in the lastTimeStamp variable\\n        s_lastTimeStamp = block.timestamp;\\n        // opening the raffle again\\n        s_raffleState = RaffleState.OPEN;\\n\\n        // emitting an event so that anyone can easily see all the winners\\n        emit WinnerPicked(s_recentWinner);\\n    }\\n\\n    /* -------------------------------------------------------------------------------- */\\n\\n    /* pure, view functions */\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 _idx) public view returns (address) {\\n        require(s_players.length > 0, \\\"No players participated!\\\");\\n        return s_players[_idx];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState; // returns a uint256 number\\n    }\\n\\n    // the state mutability is pure because we are not reading from the chain,\\n    // we are just reading a constant value of our contract\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLatestTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n}\\n\",\"keccak256\":\"0xb6f46459b4abc30fd7bdb13defab985276a9df1b9339c88b9c8b368e3feeafe4\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200195238038062001952833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508460a081815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250508061014081815250506000600160146101000a81548160ff0219169083600181111562000116576200011562000330565b5b0217905550426002819055505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611583620003cf600039600081816107fa0152610893015260006106b3015260006106900152600061066f015260006106330152600081816102fa01526103f7015260008181610337015261038b01526115836000f3fe6080604052600436106100c25760003560e01c8063473f1ddc1161007f5780636e04ff0d116100595780636e04ff0d1461022557806391ad27b414610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b8063473f1ddc146101a457806353a2c19a146101cf5780635f1b0fd8146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc53914610146578063320229eb146101505780634585e33b1461017b575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c82565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610d14565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610ec8565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b50610165610563565b6040516101729190610c82565b60405180910390f35b34801561018757600080fd5b506101a2600480360381019061019d9190610f7f565b61056d565b005b3480156101b057600080fd5b506101b961076c565b6040516101c6919061100d565b60405180910390f35b3480156101db57600080fd5b506101e4610796565b6040516101f19190610c82565b60405180910390f35b34801561020657600080fd5b5061020f6107a5565b60405161021c9190610c82565b60405180910390f35b34801561023157600080fd5b5061024c600480360381019061024791906110dd565b6107b2565b60405161025a9291906111c0565b60405180910390f35b34801561026f57600080fd5b5061027861088f565b6040516102859190610c82565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b091906111f0565b6108b7565b6040516102c2919061100d565b60405180910390f35b3480156102d757600080fd5b506102e0610946565b6040516102ed9190610c82565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de92919061121d565b60405180910390fd5b6103f18282610952565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517f3c21f23000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018081111561046257610461610c9d565b5b600160149054906101000a900460ff16600181111561048457610483610c9d565b5b036104bb576040517fddafad9800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b6000610587604051806020016040528060008152506107b2565b509050806106055747600080549050600160149054906101000a900460ff1660018111156105b8576105b7610c9d565b5b600254426105c69190611275565b6040517fd1b608610000000000000000000000000000000000000000000000000000000081526004016105fc94939291906112a9565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561062a57610629610c9d565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106f4959493929190611366565b6020604051808303816000875af1158015610713573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073791906113ce565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000606060009150600060018111156107ce576107cd610c9d565b5b600160149054906101000a900460ff1660018111156107f0576107ef610c9d565b5b14801561082957507f0000000000000000000000000000000000000000000000000000000000000000600254426108279190611275565b115b8015610839575060008080549050115b80156108455750600047115b1561084f57600191505b816040518060400160405280600381526020017f307830000000000000000000000000000000000000000000000000000000000081525091509150915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060008054905011610900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f790611458565b60405180910390fd5b6000828154811061091457610913611478565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b600080805490508260008151811061096d5761096c611478565b5b602002602001015161097f91906114d6565b90506000818154811061099557610994611478565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610a4890611538565b60006040518083038185875af1925050503d8060008114610a85576040519150601f19603f3d011682016040523d82523d6000602084013e610a8a565b606091505b5050905080610ac5576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600067ffffffffffffffff811115610ae057610adf610d85565b5b604051908082528060200260200182016040528015610b0e5781602001602082028036833780820191505090505b5060009080519060200190610b24929190610bc2565b50426002819055506000600160146101000a81548160ff02191690836001811115610b5257610b51610c9d565b5b0217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a250505050565b828054828255906000526020600020908101928215610c3b579160200282015b82811115610c3a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610be2565b5b509050610c489190610c4c565b5090565b5b80821115610c65576000816000905550600101610c4d565b5090565b6000819050919050565b610c7c81610c69565b82525050565b6000602082019050610c976000830184610c73565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610cdd57610cdc610c9d565b5b50565b6000819050610cee82610ccc565b919050565b6000610cfe82610ce0565b9050919050565b610d0e81610cf3565b82525050565b6000602082019050610d296000830184610d05565b92915050565b6000604051905090565b600080fd5b600080fd5b610d4c81610c69565b8114610d5757600080fd5b50565b600081359050610d6981610d43565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610dbd82610d74565b810181811067ffffffffffffffff82111715610ddc57610ddb610d85565b5b80604052505050565b6000610def610d2f565b9050610dfb8282610db4565b919050565b600067ffffffffffffffff821115610e1b57610e1a610d85565b5b602082029050602081019050919050565b600080fd5b6000610e44610e3f84610e00565b610de5565b90508083825260208201905060208402830185811115610e6757610e66610e2c565b5b835b81811015610e905780610e7c8882610d5a565b845260208401935050602081019050610e69565b5050509392505050565b600082601f830112610eaf57610eae610d6f565b5b8135610ebf848260208601610e31565b91505092915050565b60008060408385031215610edf57610ede610d39565b5b6000610eed85828601610d5a565b925050602083013567ffffffffffffffff811115610f0e57610f0d610d3e565b5b610f1a85828601610e9a565b9150509250929050565b600080fd5b60008083601f840112610f3f57610f3e610d6f565b5b8235905067ffffffffffffffff811115610f5c57610f5b610f24565b5b602083019150836001820283011115610f7857610f77610e2c565b5b9250929050565b60008060208385031215610f9657610f95610d39565b5b600083013567ffffffffffffffff811115610fb457610fb3610d3e565b5b610fc085828601610f29565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ff782610fcc565b9050919050565b61100781610fec565b82525050565b60006020820190506110226000830184610ffe565b92915050565b600080fd5b600067ffffffffffffffff82111561104857611047610d85565b5b61105182610d74565b9050602081019050919050565b82818337600083830152505050565b600061108061107b8461102d565b610de5565b90508281526020810184848401111561109c5761109b611028565b5b6110a784828561105e565b509392505050565b600082601f8301126110c4576110c3610d6f565b5b81356110d484826020860161106d565b91505092915050565b6000602082840312156110f3576110f2610d39565b5b600082013567ffffffffffffffff81111561111157611110610d3e565b5b61111d848285016110af565b91505092915050565b60008115159050919050565b61113b81611126565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561117b578082015181840152602081019050611160565b60008484015250505050565b600061119282611141565b61119c818561114c565b93506111ac81856020860161115d565b6111b581610d74565b840191505092915050565b60006040820190506111d56000830185611132565b81810360208301526111e78184611187565b90509392505050565b60006020828403121561120657611205610d39565b5b600061121484828501610d5a565b91505092915050565b60006040820190506112326000830185610ffe565b61123f6020830184610ffe565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061128082610c69565b915061128b83610c69565b92508282039050818111156112a3576112a2611246565b5b92915050565b60006080820190506112be6000830187610c73565b6112cb6020830186610c73565b6112d86040830185610c73565b6112e56060830184610c73565b95945050505050565b6000819050919050565b611301816112ee565b82525050565b600067ffffffffffffffff82169050919050565b61132481611307565b82525050565b600061ffff82169050919050565b6113418161132a565b82525050565b600063ffffffff82169050919050565b61136081611347565b82525050565b600060a08201905061137b60008301886112f8565b611388602083018761131b565b6113956040830186611338565b6113a26060830185611357565b6113af6080830184611357565b9695505050505050565b6000815190506113c881610d43565b92915050565b6000602082840312156113e4576113e3610d39565b5b60006113f2848285016113b9565b91505092915050565b600082825260208201905092915050565b7f4e6f20706c617965727320706172746963697061746564210000000000000000600082015250565b60006114426018836113fb565b915061144d8261140c565b602082019050919050565b6000602082019050818103600083015261147181611435565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114e182610c69565b91506114ec83610c69565b9250826114fc576114fb6114a7565b5b828206905092915050565b600081905092915050565b50565b6000611522600083611507565b915061152d82611512565b600082019050919050565b600061154382611515565b915081905091905056fea2646970667358221220ee3b55549e454b28b8334a7c23d879ddf34e514e825d9598634dfbf00dafe21e64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c8063473f1ddc1161007f5780636e04ff0d116100595780636e04ff0d1461022557806391ad27b414610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b8063473f1ddc146101a457806353a2c19a146101cf5780635f1b0fd8146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc53914610146578063320229eb146101505780634585e33b1461017b575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c82565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610d14565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610ec8565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b50610165610563565b6040516101729190610c82565b60405180910390f35b34801561018757600080fd5b506101a2600480360381019061019d9190610f7f565b61056d565b005b3480156101b057600080fd5b506101b961076c565b6040516101c6919061100d565b60405180910390f35b3480156101db57600080fd5b506101e4610796565b6040516101f19190610c82565b60405180910390f35b34801561020657600080fd5b5061020f6107a5565b60405161021c9190610c82565b60405180910390f35b34801561023157600080fd5b5061024c600480360381019061024791906110dd565b6107b2565b60405161025a9291906111c0565b60405180910390f35b34801561026f57600080fd5b5061027861088f565b6040516102859190610c82565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b091906111f0565b6108b7565b6040516102c2919061100d565b60405180910390f35b3480156102d757600080fd5b506102e0610946565b6040516102ed9190610c82565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de92919061121d565b60405180910390fd5b6103f18282610952565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517f3c21f23000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018081111561046257610461610c9d565b5b600160149054906101000a900460ff16600181111561048457610483610c9d565b5b036104bb576040517fddafad9800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b6000610587604051806020016040528060008152506107b2565b509050806106055747600080549050600160149054906101000a900460ff1660018111156105b8576105b7610c9d565b5b600254426105c69190611275565b6040517fd1b608610000000000000000000000000000000000000000000000000000000081526004016105fc94939291906112a9565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561062a57610629610c9d565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106f4959493929190611366565b6020604051808303816000875af1158015610713573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073791906113ce565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000606060009150600060018111156107ce576107cd610c9d565b5b600160149054906101000a900460ff1660018111156107f0576107ef610c9d565b5b14801561082957507f0000000000000000000000000000000000000000000000000000000000000000600254426108279190611275565b115b8015610839575060008080549050115b80156108455750600047115b1561084f57600191505b816040518060400160405280600381526020017f307830000000000000000000000000000000000000000000000000000000000081525091509150915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060008054905011610900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f790611458565b60405180910390fd5b6000828154811061091457610913611478565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b600080805490508260008151811061096d5761096c611478565b5b602002602001015161097f91906114d6565b90506000818154811061099557610994611478565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610a4890611538565b60006040518083038185875af1925050503d8060008114610a85576040519150601f19603f3d011682016040523d82523d6000602084013e610a8a565b606091505b5050905080610ac5576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600067ffffffffffffffff811115610ae057610adf610d85565b5b604051908082528060200260200182016040528015610b0e5781602001602082028036833780820191505090505b5060009080519060200190610b24929190610bc2565b50426002819055506000600160146101000a81548160ff02191690836001811115610b5257610b51610c9d565b5b0217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a250505050565b828054828255906000526020600020908101928215610c3b579160200282015b82811115610c3a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610be2565b5b509050610c489190610c4c565b5090565b5b80821115610c65576000816000905550600101610c4d565b5090565b6000819050919050565b610c7c81610c69565b82525050565b6000602082019050610c976000830184610c73565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610cdd57610cdc610c9d565b5b50565b6000819050610cee82610ccc565b919050565b6000610cfe82610ce0565b9050919050565b610d0e81610cf3565b82525050565b6000602082019050610d296000830184610d05565b92915050565b6000604051905090565b600080fd5b600080fd5b610d4c81610c69565b8114610d5757600080fd5b50565b600081359050610d6981610d43565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610dbd82610d74565b810181811067ffffffffffffffff82111715610ddc57610ddb610d85565b5b80604052505050565b6000610def610d2f565b9050610dfb8282610db4565b919050565b600067ffffffffffffffff821115610e1b57610e1a610d85565b5b602082029050602081019050919050565b600080fd5b6000610e44610e3f84610e00565b610de5565b90508083825260208201905060208402830185811115610e6757610e66610e2c565b5b835b81811015610e905780610e7c8882610d5a565b845260208401935050602081019050610e69565b5050509392505050565b600082601f830112610eaf57610eae610d6f565b5b8135610ebf848260208601610e31565b91505092915050565b60008060408385031215610edf57610ede610d39565b5b6000610eed85828601610d5a565b925050602083013567ffffffffffffffff811115610f0e57610f0d610d3e565b5b610f1a85828601610e9a565b9150509250929050565b600080fd5b60008083601f840112610f3f57610f3e610d6f565b5b8235905067ffffffffffffffff811115610f5c57610f5b610f24565b5b602083019150836001820283011115610f7857610f77610e2c565b5b9250929050565b60008060208385031215610f9657610f95610d39565b5b600083013567ffffffffffffffff811115610fb457610fb3610d3e565b5b610fc085828601610f29565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ff782610fcc565b9050919050565b61100781610fec565b82525050565b60006020820190506110226000830184610ffe565b92915050565b600080fd5b600067ffffffffffffffff82111561104857611047610d85565b5b61105182610d74565b9050602081019050919050565b82818337600083830152505050565b600061108061107b8461102d565b610de5565b90508281526020810184848401111561109c5761109b611028565b5b6110a784828561105e565b509392505050565b600082601f8301126110c4576110c3610d6f565b5b81356110d484826020860161106d565b91505092915050565b6000602082840312156110f3576110f2610d39565b5b600082013567ffffffffffffffff81111561111157611110610d3e565b5b61111d848285016110af565b91505092915050565b60008115159050919050565b61113b81611126565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561117b578082015181840152602081019050611160565b60008484015250505050565b600061119282611141565b61119c818561114c565b93506111ac81856020860161115d565b6111b581610d74565b840191505092915050565b60006040820190506111d56000830185611132565b81810360208301526111e78184611187565b90509392505050565b60006020828403121561120657611205610d39565b5b600061121484828501610d5a565b91505092915050565b60006040820190506112326000830185610ffe565b61123f6020830184610ffe565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061128082610c69565b915061128b83610c69565b92508282039050818111156112a3576112a2611246565b5b92915050565b60006080820190506112be6000830187610c73565b6112cb6020830186610c73565b6112d86040830185610c73565b6112e56060830184610c73565b95945050505050565b6000819050919050565b611301816112ee565b82525050565b600067ffffffffffffffff82169050919050565b61132481611307565b82525050565b600061ffff82169050919050565b6113418161132a565b82525050565b600063ffffffff82169050919050565b61136081611347565b82525050565b600060a08201905061137b60008301886112f8565b611388602083018761131b565b6113956040830186611338565b6113a26060830185611357565b6113af6080830184611357565b9695505050505050565b6000815190506113c881610d43565b92915050565b6000602082840312156113e4576113e3610d39565b5b60006113f2848285016113b9565b91505092915050565b600082825260208201905092915050565b7f4e6f20706c617965727320706172746963697061746564210000000000000000600082015250565b60006114426018836113fb565b915061144d8261140c565b602082019050919050565b6000602082019050818103600083015261147181611435565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114e182610c69565b91506114ec83610c69565b9250826114fc576114fb6114a7565b5b828206905092915050565b600081905092915050565b50565b6000611522600083611507565b915061152d82611512565b600082019050919050565b600061154382611515565b915081905091905056fea2646970667358221220ee3b55549e454b28b8334a7c23d879ddf34e514e825d9598634dfbf00dafe21e64736f6c63430008110033",
  "devdoc": {
    "author": "Shadab Iqbal",
    "details": "This contract utilizes Chainlink VRF v2 and Chainlink Keepers",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. If checkUpKeep() returns true, the \"performUpKeep\" function will be called. The following should be true for this to return true: 1. The lottery is open. 2. The time interval has passed between raffle runs. 3. There is atleast 1 participant 4. The contract has ETH. 5. Implicity, your subscription is funded with LINK."
      }
    },
    "title": "An unbiased lottery contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is to create an untamperable decentralized lottery system",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 206,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 208,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 226,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)201"
      },
      {
        "astId": 230,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)201": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}